PARTICIPANTS: use this file for creating the class diagram in mastery task 01
@startuml
class getBookActivity {
 - recommendationServiceClient: RecommendationsServiceClient
 - catalogDao: CatalogDao
 + GetBookActivity(catalogDao: CatalogDao,
 recommendationServiceClient: RecommendationsServiceClient)
 + execute(request: GetBookRequest): GetBookResponse
}

class GetPublishingStatusActivity {
+ execute (publishingStatusRequest : GetPublishingStatusRequest) : GetPublishingStatusResponse
}

class RemoveBookFromCatalogActivity {
+ execute(removeBookFromCatalogRequest : RemoveBookFromCatalogRequest) : RemoveBookFromCatalogResponse
}

class SubmitBookForPublishingActivity {
- publishingStatusDao : PublishingStatusDao
+ execute(request : SubmitBookForPublishingRequest) : SubmitBookForPublishingResponse
}

class RecommendationsServiceClient {
- recommendationsService : RecommendationsService
+ getBookRecommendations(genre : BookGenre) : List<BookRecommendation>
}

class CatalogDao {
- dynamoDBMapper : DynamoDBMapper
+ getBookFromCatalog(bookId : String) : CatalogItemVersion
- getLatestVersionOfBook(bookId : String) : CatalogItemVersion
}

class PublishingStatusDao {
- ADDITIONAL_NOTES_PREFIX : String
- dynamoDBMapper : DynamoDBMapper
+ setPublishingStatus(publishingRecordId : String, publishingRecordStatus : PublishingRecordStatus,
                      bookId : String) : PublishingStatusItem
+ setPublishingStatus(publishingRecordId : String, publishingRecordStatus : PublishingRecordStatus,
                                           bookId : String, message : String) : PublishingStatusItem

}
class GetBookRequest {
- bookId : String
+ getBookId() : String
+ setBookId(bookId : String) : void
+ GetBookRequest()
+ GetBookRequest (builder : Builder)
+ equals(o: Object): boolean
+ hashCode(): int
+ builder(): Builder
class GetBookRequest.Builder {
    - bookId: String

    + withBookId(bookIdToUse: String): Builder
    + build(): GetBookRequest}
}

class GetPublishingStatusRequest {
- publishingRecordId : String
+ GetPublishingStatusRequest(publishingRecordId : String)
+ getPublishingRecordId() : String
+ setPublishingRecordId(publishingRecordId : String) : void
+ equals(o: Object): boolean
+ hashCode(): int
+ GetPublishingStatusRequest(builder : Builder)
class GetPublishingStatusRequest.Builder {
    - publishingRecordId : String
    + withPublishingRecordId(publishingRecordId : String) : Builder
    + build() : GetPublishingStatusRequest
}

class RemoveBookFromCatalogRequest {
- bookId : String
+ RemoveBookFromCatalogRequest()
+ getBookId() : String
+ setBookId (bookId : String) : void
+ equals(o: Object): boolean
+ hashCode(): int
+ RemoveBookFromCatalogRequest(builder : Builder)
class RemoveBookFromCatalogRequest.Builder {
    - bookId : String
    + withBookId (bookId : String)
    + build() : RemoveBookFromCatalogRequest
}

class SubmitBookForPublishingRequest {
    - bookId: String
    - title: String
    - author: String
    - text: String
    - genre: String

     + SubmitBookForPublishingRequest(bookId: String, title: String, author: String, text: String, genre: String)
     + getBookId(): String
     + setBookId(bookId: String): void
     + getTitle(): String
     + setTitle(title: String): void
     + getAuthor(): String
     + setAuthor(author: String): void
     + getText(): String
     + setText(text: String): void
     + getGenre(): String
     + setGenre(genre: String): void
     + equals(o: Object): boolean
     + hashCode(): int
     + SubmitBookForPublishingRequest(builder: Builder)
    + builder(): Builder
class SubmitBookForPublishingRequest.Builder
    - bookId: String
    - title: String
    - author: String
    - text: String
    - genre: String

     + withBookId(bookIdToUse: String): Builder
     + withTitle(titleToUse: String): Builder
     + withAuthor(authorToUse: String): Builder
     + withText(textToUse: String): Builder
     + withGenre(genreToUse: String): Builder
     + build(): SubmitBookForPublishingRequest
}
class GetBookResponse {
- book: Book
- recommendations : List<BookRecommendation>
+ GetBookResponse(book: Book, recommendations : List<BookRecommendation>)
+ getBook() : Book
+ setBook(book : Book) : void
+ getRecommendations() : List<BookRecommendation>
+ setRecommendations(recommendations : List<BookRecommendation>) : void
+ equals(o: Object): boolean
+ hashCode(): int
class GetBookResponse.Builder
    - book: Book
    - recommendations : List<BookRecommendation>
    + withBook(book : Book) : Builder
    + withRecommendations(recommendations : List<BookRecommendation>) : Builder
    + build() : GetBookResponse

}
class GetPublishingStatusResponse {
    - publishingStatusHistory: List<PublishingStatusRecord>

    + GetPublishingStatusResponse(publishingStatusHistory: List<PublishingStatusRecord>)
    + getPublishingStatusHistory(): List<PublishingStatusRecord>
    + setPublishingStatusHistory(publishingStatusHistory: List<PublishingStatusRecord>): void
    + equals(o: Object): boolean
    + hashCode(): int
    + GetPublishingStatusResponse(builder: Builder)
    + builder(): Builder
    class GetPublishingStatusResponse.Builder {
    - publishingStatusHistory: List<PublishingStatusRecord>

    + withPublishingStatusHistory(publishingStatusHistoryToUse: List<PublishingStatusRecord>): Builder
    + build(): GetPublishingStatusResponse
}

class RemoveBookFromCatalogResponse {
+ RemoveBookFromCatalogResponse()
}
class SubmitBookForPublishingResponse {
    - publishingRecordId: String

    + SubmitBookForPublishingResponse(publishingRecordId: String)
    + getPublishingRecordId(): String
    + setPublishingRecordId(publishingRecordId: String): void
    + equals(o: Object): boolean
    + hashCode(): int
    + builder(): Builder
    class SubmitBookForPublishingResponse.Builder {
    - publishingRecordId: String

    + withPublishingRecordId(publishingRecordIdToUse: String): Builder
    + build(): SubmitBookForPublishingResponse
}

class Book {
    - bookId: String
    - title: String
    - author: String
    - text: String
    - genre: String
    - version: int

     + getBookId(): String
     + setBookId(bookId: String): void
     + getTitle(): String
     + setTitle(title: String): void
     + getAuthor(): String
     + setAuthor(author: String): void
     + getText(): String
     + setText(text: String): void
     + getGenre(): String
     + setGenre(genre: String): void
     + getVersion(): int
     + setVersion(version: int): void
    + Book(bookId: String, title: String, author: String, text: String, genre: String, version: int)
    + equals(o: Object): boolean
    + hashCode(): int
    + builder(): Builder
    class Book.Builder {
        - bookId: String
        - title: String
        - author: String
        - text: String
        - genre: String
        - version: int

         + withBookId(bookIdToUse: String): Builder
         + withTitle(titleToUse: String): Builder
         + withAuthor(authorToUse: String): Builder
         + withText(textToUse: String): Builder
         + withGenre(genreToUse: String): Builder
         + withVersion(versionToUse: int): Builder
         + build(): Book
}

class BookRecommendation {
    - title: String
    - author: String
    - asin: String

     + BookRecommendation(title: String, author: String, asin: String)
     + getTitle(): String
     + setTitle(title: String): void
     + getAuthor(): String
     + setAuthor(author: String): void
     + getAsin(): String
     + setAsin(asin: String): void
     + equals(o: Object): boolean
     + hashCode(): int
     + BookRecommendation(builder: Builder)
    + builder(): Builder

    class BookRecommendation.Builder {
        - title: String
        - author: String
        - asin: String

         + withTitle(titleToUse: String): Builder
         + withAuthor(authorToUse: String): Builder
         + withAsin(asinToUse: String): Builder
         + build(): BookRecommendation
}

class PublishingStatus {
    +QUEUED: String
    +IN_PROGRESS: String
    +FAILED: String
    +SUCCESSFUL: String
}
class PublishingStatusRecord {
    - status: String
    - statusMessage: String
    - bookId: String

     + PublishingStatusRecord(status: String, statusMessage: String, bookId: String)
     + getStatus(): String
     + setStatus(status: String): void
     + getStatusMessage(): String
     + setStatusMessage(statusMessage: String): void
     + getBookId(): String
     + setBookId(bookId: String): void
     + equals(o: Object): boolean
     + hashCode(): int
     + PublishingStatusRecord(builder: Builder)
    + builder(): Builder
    class PublishingStatusRecord.Builder {
        - status: String
        - statusMessage: String
        - bookId: String

         + withStatus(statusToUse: String): Builder
         + withStatusMessage(statusMessageToUse: String): Builder
         + withBookId(bookIdToUse: String): Builder
         + build(): PublishingStatusRecord
}

class BookNotFoundException {
    + serialVersionUID: long
    {method} + BookNotFoundException(message: String)
    {method} + BookNotFoundException(message: String, cause: Throwable)
}

class PublishingStatusNotFoundException {
    + serialVersionUID: long
    {method} + PublishingStatusNotFoundException(message: String)
    {method} + PublishingStatusNotFoundException(message: String, cause: Throwable)
}

GetBookActivity --|> RecommendationsServiceClient
GetBookActivity --|> CatalogDao
GetBookActivity --|> GetBookRequest
GetBookActivity --|> GetBookResponse
GetBookActivity --|> CatalogItemConverter
GetBookActivity --|> RecommendationsCoralConverter
GetBookActivity --|> CatalogItemVersion
GetBookActivity --|> BookRecommendation
GetBookActivity --|> BookGenre
GetBookRequest --|> GetBookRequest.Builder
GetPublishingStatusRequest --|> GetPublishingStatusRequest.Builder
RemoveBookFromCatalogRequest --|> RemoveBookFromCatalogRequest.Builder
SubmitBookForPublishingRequest --|> SubmitBookForPublishingRequest.Builder
GetBookResponse --|> GetBookResponse.Builder
GetPublishingStatusResponse --|> GetPublishingStatusResponse.Builder
GetPublishingStatusResponse --|> PublishingStatusRecord
Book --|> GetPublishingStatusResponse
BookRecommendation --|> Book
PublishingStatusRecord --|> Book
PublishingStatusRecord --|> PublishingStatus
RuntimeException <|-- BookNotFoundException
RuntimeException <|-- PublishingStatusNotFoundException

@enduml